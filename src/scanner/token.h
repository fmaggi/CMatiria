#ifndef MTR_TOKEN_H
#define MTR_TOKEN_H

#include "core/types.h"

enum mtr_token_type {
    // single char
    MTR_TOKEN_PLUS, MTR_TOKEN_MINUS, MTR_TOKEN_STAR, MTR_TOKEN_SLASH, MTR_TOKEN_PERCENT,
    MTR_TOKEN_COMMA, MTR_TOKEN_COLON, MTR_TOKEN_SEMICOLON, MTR_TOKEN_DOT,
    MTR_TOKEN_PAREN_L, MTR_TOKEN_PAREN_R,
    MTR_TOKEN_SQR_L, MTR_TOKEN_SQR_R,
    MTR_TOKEN_CURLY_L, MTR_TOKEN_CURLY_R,
    MTR_TOKEN_BANG,
    MTR_TOKEN_ASSIGN,
    MTR_TOKEN_GREATER, MTR_TOKEN_LESS,
    MTR_TOKEN_AND, MTR_TOKEN_OR,

    // double char
    MTR_TOKEN_ARROW,
    MTR_TOKEN_BANG_EQUAL, MTR_TOKEN_EQUAL, MTR_TOKEN_GREATER_EQUAL, MTR_TOKEN_LESS_EQUAL,
    MTR_TOKEN_DOUBLE_SLASH,

    MTR_TOKEN_ELLIPSIS,

    // Literals.
    MTR_TOKEN_STRING_LITERAL, MTR_TOKEN_INT_LITERAL, MTR_TOKEN_FLOAT_LITERAL,

    MTR_TOKEN_LET,
    MTR_TOKEN_TYPE,
    MTR_TOKEN_IF, MTR_TOKEN_ELSE,
    MTR_TOKEN_TRUE, MTR_TOKEN_FALSE,
    MTR_TOKEN_FN,
    MTR_TOKEN_RETURN,
    MTR_TOKEN_WHILE, MTR_TOKEN_FOR,

    // types
    MTR_TOKEN_INT,
    MTR_TOKEN_FLOAT,
    MTR_TOKEN_BOOL,

    MTR_TOKEN_IDENTIFIER,

    MTR_TOKEN_COMMENT,
    MTR_TOKEN_EOF,
    MTR_TOKEN_INVALID
};

struct mtr_token {
    enum mtr_token_type type;
    const char* start;
    u32 length;
};

extern const struct mtr_token invalid_token;

#endif
